# Bio Generator
# features/bio_generator.py 
# skeleton generated by ChatGPT

import random

TEMPLATES = [
    "{name} is a {adjective} {race} {cls} who once {backstory}.",
    "Once known for {fame}, {name} now {present_motive}.",
    "{name}, a {race} {cls}, {present_motive}. They once {backstory}.",
    "Feared across the lands, {name} the {adjective} {cls} seeks to {present_goal}.",
    "Born among {origin}, {name} {backstory}, and now {present_motive}.",
]

ADJECTIVES = [
    "fierce", "mysterious", "cursed", "noble", "wild", "forgotten", "haunted",
    "stoic", "reckless", "wise", "vengeful", "serene"
]

BACKSTORIES = [
    "lost everything in a fire", "was raised by wolves", "betrayed their order",
    "served a corrupt king", "escaped from an arcane prison",
    "watched their village fall to war", "defied the gods", "tamed a wyvern"
]

FAME = [
    "slaying a demon lord", "saving a cursed town", "dueling a dragon", 
    "stealing a royal heirloom", "winning a gladiator tournament",
    "breaking a magical pact", "mastering all schools of magic"
]

PRESENT_MOTIVES = [
    "seeks redemption", "hunts a shadowy cult", "guards a secret heir",
    "wanders in search of meaning", "seeks forgotten lore",
    "wants revenge", "has sworn a sacred vow"
]

PRESENT_GOALS = [
    "avenge their kin", "restore balance to the realm", "destroy an ancient evil",
    "become immortal", "rewrite history", "find their lost twin"
]

ORIGINS = [
    "the frozen north", "a sunken city", "a forgotten monastery",
    "deep jungles", "a cursed bloodline", "nomadic clans",
    "celestial wanderers"
]

def generate_bio(name, race, cls):
    template = random.choice(TEMPLATES)
    context = {
        "name": name,
        "race": race,
        "cls": cls,
        "adjective": random.choice(ADJECTIVES),
        "backstory": random.choice(BACKSTORIES),
        "fame": random.choice(FAME),
        "present_motive": random.choice(PRESENT_MOTIVES),
        "present_goal": random.choice(PRESENT_GOALS),
        "origin": random.choice(ORIGINS)
    }
    return template.format(**context)

from features.bio_generator import generate_bio

# After generating the name, race, and class:
bio = generate_bio(name, race, char_class)
print("BIO:\n", bio)

